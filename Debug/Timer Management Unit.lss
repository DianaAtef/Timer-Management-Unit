
Timer Management Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000003ca  0000045e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  00800068  00800068  00000466  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000466  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000175d  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aee  00000000  00000000  00001e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df5  00000000  00000000  00002907  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  000036fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000843  00000000  00000000  00003a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f16  00000000  00000000  0000428b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000051a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 39       	cpi	r26, 0x9D	; 157
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  8a:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ToggleLed>:
#include "led.h"
#include "TMU.h"

void ToggleLed(void)
{
	ledToggle(LED0);
  92:	80 e1       	ldi	r24, 0x10	; 16
  94:	0e 94 bc 00 	call	0x178	; 0x178 <ledToggle>
  98:	08 95       	ret

0000009a <ToggleLed2>:

}
void ToggleLed2(void)
{
	ledToggle(LED1);
  9a:	80 e2       	ldi	r24, 0x20	; 32
  9c:	0e 94 bc 00 	call	0x178	; 0x178 <ledToggle>
  a0:	08 95       	ret

000000a2 <main>:

}

int main(void)
{
	led_init(LED0);
  a2:	80 e1       	ldi	r24, 0x10	; 16
  a4:	0e 94 b6 00 	call	0x16c	; 0x16c <led_init>
	led_init(LED1);
  a8:	80 e2       	ldi	r24, 0x20	; 32
  aa:	0e 94 b6 00 	call	0x16c	; 0x16c <led_init>
	TMU_Init();
  ae:	0e 94 85 01 	call	0x30a	; 0x30a <TMU_Init>
	TMU_Start_Timer(1,ToggleLed,PERIODIC);
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	69 e4       	ldi	r22, 0x49	; 73
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 93 01 	call	0x326	; 0x326 <TMU_Start_Timer>
	TMU_Start_Timer(2,ToggleLed2,PERIODIC);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	6d e4       	ldi	r22, 0x4D	; 77
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 93 01 	call	0x326	; 0x326 <TMU_Start_Timer>
    while (1) 
    {
		TMU_Dispatch();
  ce:	0e 94 b5 01 	call	0x36a	; 0x36a <TMU_Dispatch>
  d2:	fd cf       	rjmp	.-6      	; 0xce <main+0x2c>

000000d4 <gpioPinDirection>:
		{
			PORTD_DATA |= (pins);
		}
		else
		{ 
			PORTD_DATA &=~ (pins);
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	89 f0       	breq	.+34     	; 0xfa <gpioPinDirection+0x26>
  d8:	28 f0       	brcs	.+10     	; 0xe4 <gpioPinDirection+0x10>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	c9 f0       	breq	.+50     	; 0x110 <gpioPinDirection+0x3c>
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	11 f1       	breq	.+68     	; 0x126 <gpioPinDirection+0x52>
  e2:	08 95       	ret
  e4:	4f 3f       	cpi	r20, 0xFF	; 255
  e6:	21 f4       	brne	.+8      	; 0xf0 <gpioPinDirection+0x1c>
  e8:	8a b3       	in	r24, 0x1a	; 26
  ea:	68 2b       	or	r22, r24
  ec:	6a bb       	out	0x1a, r22	; 26
  ee:	08 95       	ret
  f0:	8a b3       	in	r24, 0x1a	; 26
  f2:	60 95       	com	r22
  f4:	68 23       	and	r22, r24
  f6:	6a bb       	out	0x1a, r22	; 26
  f8:	08 95       	ret
  fa:	4f 3f       	cpi	r20, 0xFF	; 255
  fc:	21 f4       	brne	.+8      	; 0x106 <gpioPinDirection+0x32>
  fe:	87 b3       	in	r24, 0x17	; 23
 100:	68 2b       	or	r22, r24
 102:	67 bb       	out	0x17, r22	; 23
 104:	08 95       	ret
 106:	87 b3       	in	r24, 0x17	; 23
 108:	60 95       	com	r22
 10a:	68 23       	and	r22, r24
 10c:	67 bb       	out	0x17, r22	; 23
 10e:	08 95       	ret
 110:	4f 3f       	cpi	r20, 0xFF	; 255
 112:	21 f4       	brne	.+8      	; 0x11c <gpioPinDirection+0x48>
 114:	84 b3       	in	r24, 0x14	; 20
 116:	68 2b       	or	r22, r24
 118:	64 bb       	out	0x14, r22	; 20
 11a:	08 95       	ret
 11c:	84 b3       	in	r24, 0x14	; 20
 11e:	60 95       	com	r22
 120:	68 23       	and	r22, r24
 122:	64 bb       	out	0x14, r22	; 20
 124:	08 95       	ret
 126:	4f 3f       	cpi	r20, 0xFF	; 255
 128:	21 f4       	brne	.+8      	; 0x132 <gpioPinDirection+0x5e>
 12a:	81 b3       	in	r24, 0x11	; 17
 12c:	68 2b       	or	r22, r24
 12e:	61 bb       	out	0x11, r22	; 17
 130:	08 95       	ret
 132:	81 b3       	in	r24, 0x11	; 17
 134:	60 95       	com	r22
 136:	68 23       	and	r22, r24
 138:	61 bb       	out	0x11, r22	; 17
 13a:	08 95       	ret

0000013c <gpioPinToggle>:

/*toggle certain pins in certain port */

void gpioPinToggle(uint8 port, uint8 pins)
{
	switch(port)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	51 f0       	breq	.+20     	; 0x154 <gpioPinToggle+0x18>
 140:	28 f0       	brcs	.+10     	; 0x14c <gpioPinToggle+0x10>
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	59 f0       	breq	.+22     	; 0x15c <gpioPinToggle+0x20>
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	69 f0       	breq	.+26     	; 0x164 <gpioPinToggle+0x28>
 14a:	08 95       	ret
	{
		case PORTA:
		PORTA_DATA ^= (pins);
 14c:	8b b3       	in	r24, 0x1b	; 27
 14e:	68 27       	eor	r22, r24
 150:	6b bb       	out	0x1b, r22	; 27
		break;
 152:	08 95       	ret
		
		case PORTB:
		PORTB_DATA ^= (pins);
 154:	88 b3       	in	r24, 0x18	; 24
 156:	68 27       	eor	r22, r24
 158:	68 bb       	out	0x18, r22	; 24
		break;
 15a:	08 95       	ret
		
		case PORTC:
		PORTC_DATA ^= (pins);
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	68 27       	eor	r22, r24
 160:	65 bb       	out	0x15, r22	; 21
		break;
 162:	08 95       	ret
		
		case PORTD:
		PORTD_DATA ^= (pins);
 164:	82 b3       	in	r24, 0x12	; 18
 166:	68 27       	eor	r22, r24
 168:	62 bb       	out	0x12, r22	; 18
 16a:	08 95       	ret

0000016c <led_init>:

void ledOn(uint8 led){
	gpioPinWrite(LED_PORT, led, HIGH);
}
void ledOff(uint8 led){
	gpioPinWrite(LED_PORT, led, LOW);
 16c:	4f ef       	ldi	r20, 0xFF	; 255
 16e:	68 2f       	mov	r22, r24
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 6a 00 	call	0xd4	; 0xd4 <gpioPinDirection>
 176:	08 95       	ret

00000178 <ledToggle>:
}
void ledToggle(uint8 led){
	gpioPinToggle(LED_PORT,led);
 178:	68 2f       	mov	r22, r24
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	0e 94 9e 00 	call	0x13c	; 0x13c <gpioPinToggle>
 180:	08 95       	ret

00000182 <SetCallBack>:
	{
		TCCR0&=~(0x07);
	}
	else if(ch_no==2)
	{
		TCCR2&=~(0x07);
 182:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
 186:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
 18a:	08 95       	ret

0000018c <Timer_init>:
 18c:	fc 01       	movw	r30, r24
 18e:	81 81       	ldd	r24, Z+1	; 0x01
 190:	ac e6       	ldi	r26, 0x6C	; 108
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	8c 93       	st	X, r24
 196:	83 81       	ldd	r24, Z+3	; 0x03
 198:	11 96       	adiw	r26, 0x01	; 1
 19a:	8c 93       	st	X, r24
 19c:	11 97       	sbiw	r26, 0x01	; 1
 19e:	82 81       	ldd	r24, Z+2	; 0x02
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	13 96       	adiw	r26, 0x03	; 3
 1a4:	9c 93       	st	X, r25
 1a6:	8e 93       	st	-X, r24
 1a8:	12 97       	sbiw	r26, 0x02	; 2
 1aa:	80 81       	ld	r24, Z
 1ac:	88 23       	and	r24, r24
 1ae:	19 f0       	breq	.+6      	; 0x1b6 <Timer_init+0x2a>
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	c1 f0       	breq	.+48     	; 0x1e4 <Timer_init+0x58>
 1b4:	27 c0       	rjmp	.+78     	; 0x204 <Timer_init+0x78>
 1b6:	81 81       	ldd	r24, Z+1	; 0x01
 1b8:	88 23       	and	r24, r24
 1ba:	19 f0       	breq	.+6      	; 0x1c2 <Timer_init+0x36>
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	69 f0       	breq	.+26     	; 0x1da <Timer_init+0x4e>
 1c0:	23 c0       	rjmp	.+70     	; 0x208 <Timer_init+0x7c>
 1c2:	83 b7       	in	r24, 0x33	; 51
 1c4:	87 7b       	andi	r24, 0xB7	; 183
 1c6:	83 bf       	out	0x33, r24	; 51
 1c8:	83 81       	ldd	r24, Z+3	; 0x03
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	f9 f4       	brne	.+62     	; 0x20c <Timer_init+0x80>
 1ce:	8f b7       	in	r24, 0x3f	; 63
 1d0:	80 68       	ori	r24, 0x80	; 128
 1d2:	8f bf       	out	0x3f, r24	; 63
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	89 bf       	out	0x39, r24	; 57
 1d8:	08 95       	ret
 1da:	83 b7       	in	r24, 0x33	; 51
 1dc:	87 7b       	andi	r24, 0xB7	; 183
 1de:	83 bf       	out	0x33, r24	; 51
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	08 95       	ret
 1e4:	81 81       	ldd	r24, Z+1	; 0x01
 1e6:	88 23       	and	r24, r24
 1e8:	19 f0       	breq	.+6      	; 0x1f0 <Timer_init+0x64>
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	31 f0       	breq	.+12     	; 0x1fa <Timer_init+0x6e>
 1ee:	10 c0       	rjmp	.+32     	; 0x210 <Timer_init+0x84>
 1f0:	85 b5       	in	r24, 0x25	; 37
 1f2:	87 7b       	andi	r24, 0xB7	; 183
 1f4:	85 bd       	out	0x25, r24	; 37
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	08 95       	ret
 1fa:	85 b5       	in	r24, 0x25	; 37
 1fc:	87 7b       	andi	r24, 0xB7	; 183
 1fe:	85 bd       	out	0x25, r24	; 37
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	08 95       	ret
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	08 95       	ret
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	08 95       	ret
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	08 95       	ret
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	08 95       	ret

00000214 <Timer_start>:
 214:	81 11       	cpse	r24, r1
 216:	12 c0       	rjmp	.+36     	; 0x23c <Timer_start+0x28>
 218:	ec e6       	ldi	r30, 0x6C	; 108
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	80 81       	ld	r24, Z
 220:	81 11       	cpse	r24, r1
 222:	04 c0       	rjmp	.+8      	; 0x22c <Timer_start+0x18>
 224:	83 b7       	in	r24, 0x33	; 51
 226:	82 60       	ori	r24, 0x02	; 2
 228:	83 bf       	out	0x33, r24	; 51
 22a:	08 95       	ret
 22c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <g_variables>
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	69 f4       	brne	.+26     	; 0x24e <Timer_start+0x3a>
 234:	83 b7       	in	r24, 0x33	; 51
 236:	86 60       	ori	r24, 0x06	; 6
 238:	83 bf       	out	0x33, r24	; 51
 23a:	08 95       	ret
 23c:	82 30       	cpi	r24, 0x02	; 2
 23e:	39 f4       	brne	.+14     	; 0x24e <Timer_start+0x3a>
 240:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <g_variables>
 244:	81 11       	cpse	r24, r1
 246:	03 c0       	rjmp	.+6      	; 0x24e <Timer_start+0x3a>
 248:	85 b5       	in	r24, 0x25	; 37
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	85 bd       	out	0x25, r24	; 37
 24e:	08 95       	ret

00000250 <__vector_11>:
{
	click2++;
}
#endif

ISR(TIMER0_OVF_vect){
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	2f 93       	push	r18
 25c:	3f 93       	push	r19
 25e:	4f 93       	push	r20
 260:	5f 93       	push	r21
 262:	6f 93       	push	r22
 264:	7f 93       	push	r23
 266:	8f 93       	push	r24
 268:	9f 93       	push	r25
 26a:	af 93       	push	r26
 26c:	bf 93       	push	r27
 26e:	ef 93       	push	r30
 270:	ff 93       	push	r31

	click++;
 272:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <click>
 276:	8f 5f       	subi	r24, 0xFF	; 255
 278:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <click>
	TCNT0=256-g_variables.g_count;
 27c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <g_variables+0x2>
 280:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <g_variables+0x3>
 284:	81 95       	neg	r24
 286:	82 bf       	out	0x32, r24	; 50
	if(click==4)
 288:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <click>
 28c:	84 30       	cpi	r24, 0x04	; 4
 28e:	39 f4       	brne	.+14     	; 0x29e <__vector_11+0x4e>
	{
		click=0;
 290:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <click>
		callBackPtr();	
 294:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <__data_end>
 298:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <__data_end+0x1>
 29c:	09 95       	icall
	}
	
	

}
 29e:	ff 91       	pop	r31
 2a0:	ef 91       	pop	r30
 2a2:	bf 91       	pop	r27
 2a4:	af 91       	pop	r26
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	7f 91       	pop	r23
 2ac:	6f 91       	pop	r22
 2ae:	5f 91       	pop	r21
 2b0:	4f 91       	pop	r20
 2b2:	3f 91       	pop	r19
 2b4:	2f 91       	pop	r18
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <TMU_Tick>:
	for(int index=0;index<gArrayIndex;index++)
	{
		gastr_TmuRequests[index].clicks=0;
	}
	return TMU_OK;
}
 2c0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <gArrayIndex>
 2c4:	88 23       	and	r24, r24
 2c6:	01 f1       	breq	.+64     	; 0x308 <TMU_Tick+0x48>
 2c8:	e0 e7       	ldi	r30, 0x70	; 112
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	9c 01       	movw	r18, r24
 2d0:	22 0f       	add	r18, r18
 2d2:	33 1f       	adc	r19, r19
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	22 0f       	add	r18, r18
 2da:	33 1f       	adc	r19, r19
 2dc:	82 0f       	add	r24, r18
 2de:	93 1f       	adc	r25, r19
 2e0:	80 59       	subi	r24, 0x90	; 144
 2e2:	9f 4f       	sbci	r25, 0xFF	; 255
 2e4:	27 81       	ldd	r18, Z+7	; 0x07
 2e6:	22 23       	and	r18, r18
 2e8:	59 f0       	breq	.+22     	; 0x300 <TMU_Tick+0x40>
 2ea:	25 81       	ldd	r18, Z+5	; 0x05
 2ec:	36 81       	ldd	r19, Z+6	; 0x06
 2ee:	40 81       	ld	r20, Z
 2f0:	51 81       	ldd	r21, Z+1	; 0x01
 2f2:	24 17       	cp	r18, r20
 2f4:	35 07       	cpc	r19, r21
 2f6:	20 f4       	brcc	.+8      	; 0x300 <TMU_Tick+0x40>
 2f8:	2f 5f       	subi	r18, 0xFF	; 255
 2fa:	3f 4f       	sbci	r19, 0xFF	; 255
 2fc:	36 83       	std	Z+6, r19	; 0x06
 2fe:	25 83       	std	Z+5, r18	; 0x05
 300:	39 96       	adiw	r30, 0x09	; 9
 302:	e8 17       	cp	r30, r24
 304:	f9 07       	cpc	r31, r25
 306:	71 f7       	brne	.-36     	; 0x2e4 <TMU_Tick+0x24>
 308:	08 95       	ret

0000030a <TMU_Init>:
 30a:	80 e6       	ldi	r24, 0x60	; 96
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 c6 00 	call	0x18c	; 0x18c <Timer_init>
 312:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <TMU_Con+0x1>
 316:	0e 94 0a 01 	call	0x214	; 0x214 <Timer_start>
 31a:	80 e6       	ldi	r24, 0x60	; 96
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	0e 94 c1 00 	call	0x182	; 0x182 <SetCallBack>
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	08 95       	ret

00000326 <TMU_Start_Timer>:
 326:	9c 01       	movw	r18, r24
 328:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <gArrayIndex>
 32c:	95 30       	cpi	r25, 0x05	; 5
 32e:	d8 f4       	brcc	.+54     	; 0x366 <TMU_Start_Timer+0x40>
 330:	e9 2f       	mov	r30, r25
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	df 01       	movw	r26, r30
 336:	aa 0f       	add	r26, r26
 338:	bb 1f       	adc	r27, r27
 33a:	aa 0f       	add	r26, r26
 33c:	bb 1f       	adc	r27, r27
 33e:	aa 0f       	add	r26, r26
 340:	bb 1f       	adc	r27, r27
 342:	ea 0f       	add	r30, r26
 344:	fb 1f       	adc	r31, r27
 346:	e0 59       	subi	r30, 0x90	; 144
 348:	ff 4f       	sbci	r31, 0xFF	; 255
 34a:	16 82       	std	Z+6, r1	; 0x06
 34c:	15 82       	std	Z+5, r1	; 0x05
 34e:	31 83       	std	Z+1, r19	; 0x01
 350:	20 83       	st	Z, r18
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	87 83       	std	Z+7, r24	; 0x07
 356:	44 83       	std	Z+4, r20	; 0x04
 358:	73 83       	std	Z+3, r23	; 0x03
 35a:	62 83       	std	Z+2, r22	; 0x02
 35c:	90 87       	std	Z+8, r25	; 0x08
 35e:	9f 5f       	subi	r25, 0xFF	; 255
 360:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <gArrayIndex>
 364:	08 95       	ret
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	08 95       	ret

0000036a <TMU_Dispatch>:
* Description: function for the dispatcher to check if the job delay time has passed and call function in main
*
*************************************************************************************************************/

void TMU_Dispatch(void)
{
 36a:	ef 92       	push	r14
 36c:	ff 92       	push	r15
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29

	for(int index=0;index<gArrayIndex;index++)
 376:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <gArrayIndex>
 37a:	88 23       	and	r24, r24
 37c:	e9 f0       	breq	.+58     	; 0x3b8 <TMU_Dispatch+0x4e>
 37e:	c0 e7       	ldi	r28, 0x70	; 112
 380:	d0 e0       	ldi	r29, 0x00	; 0
 382:	00 e0       	ldi	r16, 0x00	; 0
 384:	10 e0       	ldi	r17, 0x00	; 0
	{
		if(gastr_TmuRequests[index].clicks==gastr_TmuRequests[index].JobDelay)
 386:	2d 81       	ldd	r18, Y+5	; 0x05
 388:	3e 81       	ldd	r19, Y+6	; 0x06
 38a:	88 81       	ld	r24, Y
 38c:	99 81       	ldd	r25, Y+1	; 0x01
 38e:	28 17       	cp	r18, r24
 390:	39 07       	cpc	r19, r25
 392:	49 f4       	brne	.+18     	; 0x3a6 <TMU_Dispatch+0x3c>
		{
			gastr_TmuRequests[index].clicks=0;
 394:	1e 82       	std	Y+6, r1	; 0x06
 396:	1d 82       	std	Y+5, r1	; 0x05
			gastr_TmuRequests[index].JobcallBackPtr();
 398:	ea 81       	ldd	r30, Y+2	; 0x02
 39a:	fb 81       	ldd	r31, Y+3	; 0x03
 39c:	09 95       	icall
			
			if(gastr_TmuRequests[index].shotOrPeriodic==SHOT)
 39e:	8c 81       	ldd	r24, Y+4	; 0x04
 3a0:	81 11       	cpse	r24, r1
 3a2:	01 c0       	rjmp	.+2      	; 0x3a6 <TMU_Dispatch+0x3c>
			{
				gastr_TmuRequests[index].status=paused;
 3a4:	1f 82       	std	Y+7, r1	; 0x07
*************************************************************************************************************/

void TMU_Dispatch(void)
{

	for(int index=0;index<gArrayIndex;index++)
 3a6:	0f 5f       	subi	r16, 0xFF	; 255
 3a8:	1f 4f       	sbci	r17, 0xFF	; 255
 3aa:	29 96       	adiw	r28, 0x09	; 9
 3ac:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <gArrayIndex>
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	08 17       	cp	r16, r24
 3b4:	19 07       	cpc	r17, r25
 3b6:	3c f3       	brlt	.-50     	; 0x386 <TMU_Dispatch+0x1c>
			/*Do nothing */
		}
	}


 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	ff 90       	pop	r15
 3c2:	ef 90       	pop	r14
 3c4:	08 95       	ret

000003c6 <_exit>:
 3c6:	f8 94       	cli

000003c8 <__stop_program>:
 3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <__stop_program>
